async function serialPortList(){return api.send("serial-port",{c:0})}import{createApp,nextTick}from"../node_modules/vue/dist/vue.esm-browser.prod.js";let phaseColors=["#000","#f00","#00f","#eee"];console.log("000-vars.js");const app=createApp({data:()=>({menuItems:["Phasor diagram","Waveform","Harmonics","Power","Energy","Settings"],settings:{serial:{availablePorts:[],selectedPort:null},updateGraphTimer:{id:null,interval:2}},waveform:{stepTime:-1,voltage:[[]],current:[[]],time:[]},harmonics:{fundamentalFrequency:-1,voltage:{amplitude:[[]],phase:[[]]},current:{amplitude:[[]],phase:[[]]}},selectedMenuItem:-1,menuPixelsOffset:150,phasorDiagram:null,waveformDiagram:null}),watch:{selectedMenuItem:async function(t){0===t&&(await nextTick(),this.resizeRequired(),this.phasorDiagram&&this.phasorDiagram.close(),this.phasorDiagram=new phasorDiagram(document.getElementById("canvas-phasor-diagram"),this.harmonics)),1===t&&(await nextTick(),this.resizeRequired(),this.waveformDiagram&&this.waveformDiagram.close(),this.waveformDiagram=new waveformDiagram(document.getElementById("div-waveform-diagram"),this.waveform))},"settings.updateGraphTimer.interval":{deep:!0,handler:async function(t,i){this.updateTheDataFromTheMachine()}}},mounted(){console.log("mounted"),this.refreshSerialPorts(),this.updateTheDataFromTheMachine()},methods:{resizeRequired:function(){this.updateAllGraphs(!0)},updateAllGraphs:function(t=!1){let i=document.getElementById("canvas-phasor-diagram");if(i&&(i.style.width=window.innerWidth-this.menuPixelsOffset+"px",i.style.height=window.innerHeight+"px",this.phasorDiagram&&this.phasorDiagram.close(),this.phasorDiagram=new phasorDiagram(i,this.harmonics)),i=document.getElementById("div-waveform-diagram"),i){if(i.style.width=window.innerWidth-this.menuPixelsOffset+"px",i.style.height=window.innerHeight+"px",this.waveformDiagram){if(!t)return void this.waveformDiagram.updateChart();this.waveformDiagram.close()}this.waveformDiagram=new waveformDiagram(i,this.waveform)}},refreshSerialPorts:async function(){let t=await api.send("serial-port",{c:0});this.settings.serial.availablePorts=t,t.length>0&&(this.settings.serial.selectedPort||(this.settings.serial.selectedPort=t[0].path))},sendReceive:async function(){let t=await api.send("serial-port",{c:1,path:this.settings.serial.selectedPort,data:"3"});console.log("response: ",t)},updateTheDataFromTheMachine:async function(){this.settings.updateGraphTimer.id&&clearInterval(this.settings.updateGraphTimer.id),this.settings.updateGraphTimer.id=setInterval(async()=>{let t=await api.send("serial-port",{c:1,path:this.settings.serial.selectedPort,data:"3"});t.length>0&&8200===t[0].length?(this.processInputFromMachine(t[0].buffer),this.updateAllGraphs()):console.log("unexpected response")},1e3*this.settings.updateGraphTimer.interval)},processInputFromMachine:function(t){this.waveform.voltage=[],this.waveform.current=[],this.harmonics.voltage.amplitude=[[]],this.harmonics.voltage.phase=[[]],this.harmonics.current.amplitude=[[]],this.harmonics.current.phase=[[]],this.waveform.time=[];const i=128,e=4;let s=0;const h=new DataView(t);this.harmonics.fundamentalFrequency=h.getFloat32(s,!0),s+=4,this.waveform.stepTime=h.getFloat32(s,!0),s+=4;for(let t=0;t<i;t++)this.waveform.time[t]=t*this.waveform.stepTime;for(let t=0;t<e;t++)this.waveform.voltage[t]=[],this.waveform.current[t]=[];for(let t=0;t<i;t++){for(let i=0;i<e;i++)this.waveform.voltage[i][t]=h.getFloat32(s,!0),s+=4;for(let i=0;i<e;i++)this.waveform.current[i][t]=h.getFloat32(s,!0),s+=4}for(let t=0;t<i/2;t++){this.harmonics.voltage.amplitude[t]=[];for(let i=0;i<e;i++)this.harmonics.voltage.amplitude[t][i]=h.getFloat32(s,!0),s+=4;this.harmonics.current.amplitude[t]=[];for(let i=0;i<e;i++)this.harmonics.current.amplitude[t][i]=h.getFloat32(s,!0),s+=4}for(let t=0;t<i/2;t++){this.harmonics.voltage.phase[t]=[];for(let i=0;i<e;i++)this.harmonics.voltage.phase[t][i]=h.getFloat32(s,!0),s+=4;this.harmonics.current.phase[t]=[];for(let i=0;i<e;i++)this.harmonics.current.phase[t][i]=h.getFloat32(s,!0),s+=4}for(let t=0;t<3;t++);}}}).mount("#app");class phasorDiagram{constructor(t,i){this.canvas=t,this.harmonics=i,this.preparePolarChartBackground(),this.plotHarmonics(),this.placeCenterPin()}preparePolarChartBackground(){this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.ctx=this.canvas.getContext("2d");let t=this.canvas.height,i=this.canvas.width;this.centerX=i/2,this.centerY=t/2;let e=Math.min(i,t);this.lineSizeThickest=e/100,this.lineSizeThick=this.lineSizeThickest/2,this.lineSizeThin=this.lineSizeThickest/4,this.blankFillColor="#fff",this.fullRadius=e/2-.075*e,this.ctx.beginPath(),this.ctx.arc(this.centerX,this.centerY,this.fullRadius,0,2*Math.PI,!1),this.ctx.lineWidth=this.lineSizeThickest,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.arc(this.centerX,this.centerY,.75*this.fullRadius,0,2*Math.PI,!1),this.ctx.lineWidth=this.lineSizeThin,this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(this.centerX,this.centerY,.5*this.fullRadius,0,2*Math.PI,!1),this.ctx.lineWidth=this.lineSizeThick,this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(this.centerX,this.centerY,.25*this.fullRadius,0,2*Math.PI,!1),this.ctx.lineWidth=this.lineSizeThin,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.moveTo(this.centerX-this.fullRadius,this.centerY),this.ctx.lineTo(this.centerX+this.fullRadius,this.centerY),this.ctx.lineWidth=this.lineSizeThick,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.moveTo(this.centerX,this.centerY-this.fullRadius),this.ctx.lineTo(this.centerX,this.centerY+this.fullRadius),this.ctx.lineWidth=this.lineSizeThick,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.moveTo(this.centerX-.866*this.fullRadius,this.centerY-.5*this.fullRadius),this.ctx.lineTo(this.centerX+.866*this.fullRadius,this.centerY+.5*this.fullRadius),this.ctx.lineWidth=this.lineSizeThin,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.moveTo(this.centerX-.5*this.fullRadius,this.centerY-.866*this.fullRadius),this.ctx.lineTo(this.centerX+.5*this.fullRadius,this.centerY+.866*this.fullRadius),this.ctx.lineWidth=this.lineSizeThin,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.moveTo(this.centerX-.5*this.fullRadius,this.centerY+.866*this.fullRadius),this.ctx.lineTo(this.centerX+.5*this.fullRadius,this.centerY-.866*this.fullRadius),this.ctx.lineWidth=this.lineSizeThin,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.moveTo(this.centerX-.866*this.fullRadius,this.centerY+.5*this.fullRadius),this.ctx.lineTo(this.centerX+.866*this.fullRadius,this.centerY-.5*this.fullRadius),this.ctx.lineWidth=this.lineSizeThin,this.ctx.stroke(),this.ctx.closePath(),this.fontSize=.03*e,this.font=this.fontSize+"px Arial",this.ctx.font=this.font,this.ctx.textAlign="center",this.ctx.textBaseline="middle";let s=this.fullRadius+.03*e;this.ctx.fillText("0°",this.centerX+s,this.centerY),this.ctx.fillText("30°",this.centerX+.866*s,this.centerY-.5*s),this.ctx.fillText("60°",this.centerX+.5*s,this.centerY-.866*s),this.ctx.fillText("90°",this.centerX,this.centerY-s),this.ctx.fillText("120°",this.centerX-.5*s,this.centerY-.866*s),this.ctx.fillText("150°",this.centerX-.866*s,this.centerY-.5*s),this.ctx.fillText("180°",this.centerX-s,this.centerY),this.ctx.fillText("210°",this.centerX-.866*s,this.centerY+.5*s),this.ctx.fillText("240°",this.centerX-.5*s,this.centerY+.866*s),this.ctx.fillText("270°",this.centerX,this.centerY+s),this.ctx.fillText("300°",this.centerX+.5*s,this.centerY+.866*s),this.ctx.fillText("330°",this.centerX+.866*s,this.centerY+.5*s)}placeArrowOnPolarChart(t,i,e,s=0){let h=Math.abs(i),a=this.fullRadius/12,n=20*Math.PI/180,r=h-a*Math.cos(n);this.ctx.beginPath(),this.ctx.moveTo(this.centerX,this.centerY);let l=this.centerX+r*Math.cos(t),c=this.centerY-r*Math.sin(t);this.ctx.lineTo(l,c),this.ctx.lineWidth=this.lineSizeThick,this.ctx.strokeStyle=e,this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),l=this.centerX+h*Math.cos(t),c=this.centerY-h*Math.sin(t),this.ctx.moveTo(l,c);let o=l-a*Math.cos(t+n),d=c+a*Math.sin(t+n);this.ctx.lineTo(o,d);let u=l-a*Math.cos(t-n),m=c+a*Math.sin(t-n);this.ctx.lineTo(u,m),this.ctx.lineTo(l,c),this.ctx.lineWidth=this.lineSizeThick,s?(this.ctx.lineWidth=0,this.ctx.fillStyle=e,this.ctx.fill()):(this.ctx.fillStyle=this.blankFillColor,this.ctx.lineWidth=this.lineSizeThick,this.ctx.fill(),this.ctx.stroke()),this.ctx.closePath()}placeCenterPin(){this.ctx.beginPath(),this.ctx.arc(this.centerX,this.centerY,5,0,2*Math.PI,!1),this.ctx.lineWidth=1,this.ctx.fillStyle="#000",this.ctx.fill(),this.ctx.closePath()}close(){}plotHarmonics(){if(this.harmonics.voltage.amplitude.length!==this.harmonics.voltage.phase.length)return void console.error("Voltage amplitude and phase arrays have different length");if(this.harmonics.current.amplitude.length!==this.harmonics.current.phase.length)return void console.error("Current amplitude and phase arrays have different length");if(this.harmonics.voltage.amplitude.length!==this.harmonics.current.amplitude.length)return void console.error("Voltage and current amplitude arrays have different length");if(this.harmonics.voltage.amplitude.length<2)return void console.error("Voltage amplitude doesn't contain the fundament frequency");if(this.harmonics.current.amplitude.length<2)return void console.error("Current amplitude doesn't contain the fundament frequency");let t=0;for(let i=0;i<this.harmonics.voltage.amplitude[1].length;i++)t<this.harmonics.voltage.amplitude[1][i]&&(t=this.harmonics.voltage.amplitude[1][i]);t=this.getNearestScaleValue(t);let i=0;for(let t=0;t<this.harmonics.current.amplitude[1].length;t++)i<this.harmonics.current.amplitude[1][t]&&(i=this.harmonics.current.amplitude[1][t]);i=this.getNearestScaleValue(i);for(let i=0;i<this.harmonics.voltage.amplitude[1].length;i++){let e=this.harmonics.voltage.phase[1][i],s=this.fullRadius*this.harmonics.voltage.amplitude[1][i]/t;this.placeArrowOnPolarChart(e,s,phaseColors[i],0)}for(let t=0;t<this.harmonics.current.amplitude[1].length;t++){let e=this.harmonics.current.phase[1][t],s=this.fullRadius*this.harmonics.current.amplitude[1][t]/i;this.placeArrowOnPolarChart(e,s,phaseColors[t],1)}this.ctx.font=this.font,this.ctx.fillStyle="#000",this.ctx.textAlign="left",this.ctx.textBaseline="top",this.ctx.fillText("Voltage",10,10),this.ctx.fillText("Scale: "+t+" V",10,10+this.fontSize);for(let t=0;t<this.harmonics.voltage.amplitude[1].length;t++)this.ctx.beginPath(),this.ctx.strokeStyle=phaseColors[t],this.ctx.fillStyle=this.blankFillColor,this.ctx.moveTo(10,10+(t+3)*this.fontSize-this.lineSizeThick),this.ctx.lineTo(10+this.fontSize,10+(t+3)*this.fontSize-this.lineSizeThick),this.ctx.lineTo(10+this.fontSize/2,10+(t+2)*this.fontSize+this.lineSizeThick),this.ctx.lineTo(10,10+(t+3)*this.fontSize-this.lineSizeThick),this.ctx.closePath(),this.ctx.fill(),this.ctx.stroke(),this.ctx.fillStyle=phaseColors[t],this.ctx.fillText("V"+(t+1)+" = "+Math.round(10*this.harmonics.voltage.amplitude[1][t])/10+" V",10+this.fontSize,10+(t+2)*this.fontSize);this.ctx.font=this.font,this.ctx.fillStyle="#000",this.ctx.textAlign="right",this.ctx.textBaseline="top",this.ctx.fillText("Current",this.canvas.width-10,10),this.ctx.fillText("Scale: "+i+" mA",this.canvas.width-10,10+this.fontSize);for(let t=0;t<this.harmonics.current.amplitude[1].length;t++)this.ctx.beginPath(),this.ctx.strokeStyle=phaseColors[t],this.ctx.fillStyle=phaseColors[t],this.ctx.moveTo(this.canvas.width-10,10+(t+3)*this.fontSize-this.lineSizeThick),this.ctx.lineTo(this.canvas.width-10-this.fontSize,10+(t+3)*this.fontSize-this.lineSizeThick),this.ctx.lineTo(this.canvas.width-10-this.fontSize/2,10+(t+2)*this.fontSize+this.lineSizeThick),this.ctx.lineTo(this.canvas.width-10,10+(t+3)*this.fontSize-this.lineSizeThick),this.ctx.closePath(),this.ctx.fill(),this.ctx.fillStyle=phaseColors[t],this.ctx.fillText("I"+(t+1)+" = "+Math.round(10*this.harmonics.current.amplitude[1][t])/10+" mA",this.canvas.width-10-this.lineSizeThick-this.fontSize,10+(t+2)*this.fontSize);this.ctx.font=this.font,this.ctx.fillStyle="#000",this.ctx.textAlign="right",this.ctx.textBaseline="bottom",this.ctx.fillText("F = "+(Math.round(100*this.harmonics.fundamentalFrequency)/100).toFixed(2)+" Hz",this.canvas.width-10,this.canvas.height-10)}getNearestScaleValue(t){return t<100?10*Math.ceil(t/10):50*Math.ceil(t/50)}}window.onresize=function(){app.resizeRequired()};class waveformDiagram{constructor(t,i){this.parent=t,this.canvas=document.createElement("canvas"),this.parent.appendChild(this.canvas),this.canvas.width=this.parent.clientWidth,this.canvas.height=this.parent.clientHeight,this.waveformData=i,this.genereateData(),this.generateConfi(),this.chart=new Chart(this.canvas,this.config)}updateChart(){this.genereateData(),this.generateConfi(),this.chart.update()}close(){this.removeAllChildNodes()}removeAllChildNodes(){for(;this.parent.firstChild;)this.parent.removeChild(this.parent.firstChild)}genereateData(){this.datasets=[];for(let t=0;t<this.waveformData.voltage.length;t++)this.datasets.push({label:"V_"+(t+1).toString(),data:this.waveformData.voltage[t],borderColor:phaseColors[t],backgroundColor:phaseColors[t],yAxisID:"voltage"});for(let t=0;t<this.waveformData.current.length;t++)this.datasets.push({label:"I_"+(t+1).toString(),data:this.waveformData.current[t],borderColor:phaseColors[t],backgroundColor:phaseColors[t],yAxisID:"current",borderDash:[5,5]});this.data={labels:this.waveformData.time,datasets:this.datasets}}generateConfi(){this.config={type:"line",data:this.data,options:{animation:{duration:0},elements:{point:{radius:0}},responsive:!0,interaction:{mode:"index",intersect:!1},stacked:!1,plugins:{title:{display:!0,text:"Waveform Diagram"}},scales:{voltage:{type:"linear",display:!0,position:"left",title:{display:!0,text:"Volt"}},current:{type:"linear",display:!0,position:"right",title:{display:!0,text:"milli Ampere"},grid:{drawOnChartArea:!1}}}}}}}