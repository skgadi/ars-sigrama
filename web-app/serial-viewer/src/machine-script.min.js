async function openSerialPort(e){try{if(!e)return void console.log("no serial port id");if(serialPortDevice){if(serialPortDevice.path===e&&serialPortDevice.isOpen)return void console.log("already open");console.log("closing serial port",serialPortDevice.path),await serialPortDevice.close(),console.log("closed serial port")}console.log("opening serial port",e),serialPortDevice=await new SerialPort({path:e,baudRate:115200}),serialPortDevice.on("error",e=>{console.log("error on serial port",e),serialPortDevice=null})}catch(e){console.log("error opening serial port",e),serialPortDevice=null}}function sleep(e){return new Promise(r=>setTimeout(r,e))}const{app:app,BrowserWindow:BrowserWindow}=require("electron"),path=require("path");require("electron-squirrel-startup")&&app.quit();const createWindow=()=>{const e=new BrowserWindow({width:800,height:600,webPreferences:{preload:path.join(__dirname,"preload.js")}});e.maximize(),e.loadFile(path.join(__dirname,"index.html")),e.removeMenu()};app.on("ready",createWindow),app.on("window-all-closed",()=>{"darwin"!==process.platform&&app.quit()}),app.on("activate",()=>{0===BrowserWindow.getAllWindows().length&&createWindow()});const{ipcMain:ipcMain}=require("electron"),{SerialPort:SerialPort}=require("serialport");let serialPortDevice=null;ipcMain.handle("serial-port",async(e,r)=>{try{if(console.log("serial-port",r),0===r.c)return SerialPort.list();if(1===r.c){if(await openSerialPort(r.path),await sleep(100),!serialPortDevice.isOpen)return null;serialPortDevice.write(r.data),await sleep(150);let e=[],o=serialPortDevice.read();for(;null!=o;)await sleep(10),e.push(o),o=serialPortDevice.read();return e}}catch(e){return console.log("error",e),null}});